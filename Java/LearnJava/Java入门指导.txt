1.基础知识
但我现在教学依然首推《Java核心技术》，主要是体系完整，实例多，可操作性强。但对初学者，我一般是只讲前6章，也就是下面的内容：

Java程序设计概述
Java程序设计环境
Java的基础程序设计结构
对象与类
继承
接口与内部类

2.Spring
我学习Spring，读的第一本书是《Spring实战》，坦率的说，书很一般，但市面上比它好的书，我却没有遇到过。还有一本《Spring源码深度解析》也不错，
对Spring的设计理念讲的尤其透彻，虽然整本书读起来有些艰涩，但前几章却生动有趣，也是整本书的精华。所以建议你在学习Spring之前，先把该书的前几章
通读一下，然后再回过头来学习《Spring实战》会顺利很多。以我经验，要学透Spring，终极的方法还是阅读源码（我当时就是这么干的），待把Spring的核心
源码通读了，人就真的自由了（所谓无真相不自由），不仅是对Spring，而是对整个Java体系


3.其他知识

Spring是Java编程的基础设施，但真要进入到实际项目的开发，还有些东西绕不过，包括 MySql，Mybatis，Redis，Servlet

4.实践


===
https://www.zhihu.com/question/305924723/answer/557800752
目前 Java 后端有哪些不是很有必要去学的？
“不要再学习Struts了，从Spring MVC开始吧！”
不需要再学习Hibernate了，学MyBatis就够了。

Servlet（要精通）
当前，Servlet虽然不再是一个主流web开发技术，但依然是Java Web开发技术的基础，是Java Web容器的基石，是行业标准。
而现在流行的各种MVC框架（包括SpringMVC），在最底层，还是以 Servlet为基础的

其他
其他目前在国内，Java更多是作为web后端技术出现的。因此在实际学习中，很多技术就不符合“国情”，学习的现实意义不大。下面我就简单列举下。
1.Applet作为页面插件技术，不用多说，连flash都快被淘汰了，更无论从未流行的applet。

2.Swing作为桌面UI框架。且不说本身设计的咋样。现实开发中，
我接触的桌面应用，要么用C++（例如MFC），要么用C#（Winform、WPF）。所以，Swing就没有学习的必要了。

3.JDBC作为较低层的数据库基础设施，JDBC被很多框架（例如MyBatis）支持。但在实际开发中，程序员即使不了解也无大碍。
因此，虽然我不能建议你放弃JDBC学习，但如果你时间有限，完全可以把它的优先级排低一点。

4.XML
XML现在还在广泛应用。
但作为一个web数据传输格式，正在逐渐被JSON替代。所以，对Java后端学习来说，XML简单了解即可。至于庞杂的XML操作API（例如XPath），
完全不必学习。将来真要用到，再查也不迟


====
https://zhuanlan.zhihu.com/p/84032726
学习路线图

Spring
目前，Spring已经成为Java开发的基础设施，是任何一个Java程序员都必须掌握的内容。因此，在掌握了Java基础知识后，接下来应转入Spring的学习。

但在正式开始学习Spring之前，还有两个问题要解决：

Spring相关jar包的管理。
测试程序的编写及管理。
所以，在正式接触Spring知识之前，路线图首先安排了 Maven和Junit的学习。

Maven和Junit，从实用角度看都不难理解，上网搜索就可以满足学习的需要。

Spring的学习又分为两个阶段：Spring Core和Spring MVC。
Spring MVC是建立在Spring Core之上，在Web MVC领域的具体应用。因此，在学习Spring MVC之前，除了学习Spring Core，还必须掌握与Java Web相关的知识，其中最核心的就是Servlet。

在通常的Java学习中，会建议学生要掌握一定的前端知识，从而便于对Spring MVC进行测试。但前端知识庞杂，且边界不好界定，从而就给Java学习者带来很大的负担。

为此，在本学习大纲中，借鉴与行业通用做法，我推荐学生通过junt和HttpClient组合，用单元测试来满足Spring MVC的测试需求。

这样，在Java学习中，就完全避免了对前端知识的接触，极大的提高了学习效率