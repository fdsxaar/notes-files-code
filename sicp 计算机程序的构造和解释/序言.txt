我认为我们的责任是去拓展这一领域，将其发展到新的方向，并在自已的家里保持趣味性

教育者、将军、减肥专家、心理学家和父母做规划(program) ，而军人、学生和另一些
社会阶层则被人规划(are programmed) 。

可以为Lisp 本身赋予一个语义(可以说是另一个模
型) ，假如说，一个程序的功能可以在(例如)谓词演算里描述，那么就可以用逻辑方法做出
一个可接受的正确性论证。不幸的是，随着程序变得更大更复杂(实际上它们几乎总是如此) ,
这种描述本身的适宜性、一致性和正确性也都变得非常值得怀提了。因此，很少能够看到有
关大程序正确性的完全形式化的论证。因为大的程序是从小东西成长起来的，开发出一个标
准化的程序结构的武器库，井保证其中每种结构的正确性一一我们称它们为惯用法，再学会
如何利用一些已经证明很有价值的组织技术，将这些结构组合成更大的结构，这些都是至关
重要的。本书中将详尽地讨论这些技术。理解这些技术，对于参与这种被称为程序设计的具
有创造性的事业是最最本质的。特别值得提出的是，发现并掌握强有力的组织技术，将提升
我们构造大型的重要程序的能力。

Pascal 是为了建造金字塔一一壮丽
辉煌、令人震憾，是由各就其位的沉重巨石筑起的静态结构。而Lisp 则是为了构造有机体一一
同样的壮丽辉煌并令人震憾，由各就其位但却永不静止的无数简单的有机体片段构成的动态
结构。

//Lisp的基础结构是表，而Pascal可定义多种数据结构
采用100 个函数在一种数据结构上操作，远远优于用10 个函数在10 个
数据结构上操作。

金字塔矗立在那里千年不变，而有机体则必须演化，否则就会死亡。

问题的洪水孵化出一种又一种新的语言。确实，在任何非常大的程序设计
工作中，一条有用的组织原则就是通过发明新语言，去控制和隔离作业模块之间的信息流动。
这些语言趋向于变得越来越不基本，逐渐逼近系统的边界，逼近我们作为人最经常与之交互
的地方。作为这一情况的结果，在这种系统里包含着大量重复的复杂的语言处理功能。

---Alan J. Perlis