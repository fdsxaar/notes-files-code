bufio包

Package bufio implements buffered I/O. It wraps an io.Reader or io.Writer object,
creating another object (Reader or Writer) that also implements the interface but 
provides buffering and some help for textual I/O.

type Scanner
//可一提供自定义分割函数
Scanner provides a convenient interface for reading data such as a file of newline-delimited 
lines of text. Successive calls to the Scan method will step through the 'tokens' 
of a file, skipping the bytes between the tokens. The specification of a token is 
defined by a split function of type SplitFunc; the default split function breaks 
the input into lines with line termination stripped. Split functions are defined in 
this package for scanning a file into lines, bytes, UTF-8-encoded runes, and space-delimited 
words. The client may instead provide a custom split function

//如果需要更强的控制，应该使用bufio.Reader 
Scanning stops unrecoverably at EOF, the first I/O error, or a token too large to fit in 
the buffer. When a scan stops, the reader may have advanced arbitrarily far past the last token.
 Programs that need more control over error handling or large tokens, or must run sequential scans
  on a reader, should use bufio.Reader instead.

func NewScanner 
//默认分割函数是Scanlines 
func NewScanner(r io.Reader) *Scanner
NewScanner returns a new Scanner to read from r. The split function defaults to ScanLines.

func (*Scanner) Scan
//返回错误
func (s *Scanner) Scan() bool
Scan advances the Scanner to the next token, which will then be available through the Bytes or
 Text method. It returns false when the scan stops, either by reaching the end of the input or 
 an error. After Scan returns false, the Err method will return any error that occurred during
  scanning, except that if it was io.EOF, Err will return nil. Scan panics if the split function 
  returns too many empty tokens without advancing the input. This is a common error mode for scanners.