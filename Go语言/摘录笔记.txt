前言
1.Go语言中和并发编程相关的特性是全新的也是有效的，同时对数据抽象
和面向对象编程的支持也很灵活。 Go语言同时还集成了自动垃圾收集技术用于更好地管理内存。

2.Go语言尤其适合编写网络服务相关基础设施，同时也适合开发一些工具软件和系统软件。 但是Go
语言确实是一个通用的编程语言，它也可以用在图形图像驱动编程、移动应用程序开发 和机器学
习等诸多领域。目前Go语言已经成为受欢迎的作为无类型的脚本语言的替代者： 因为Go编写的程
序通常比脚本语言运行的更快也更安全，而且很少会发生意外的类型错误。

3.编程语言的演化跟生物物种的演化类似，一个成功的编程语言的后代一般都会继承它们祖先的优
点；当然有时多种语言杂合也可能会产生令人惊讶的特性；还有一些激进的新特性可能并没有先
例。通过观察这些影响，我们可以学到为什么一门语言是这样子的，它已经适应了怎样的环境
[注]：考察一门语言的一种方法

4.Go语言有时候被描述为“C类似语言”，或者是“21世纪的C语言”。Go从C语言继承了相似的表达式
语法、控制流结构、基础数据类型、调用参数传值、指针等很多思想，还有C语言一直所看中的编
译后机器码的运行效率以及和现有操作系统的无缝适配。

但是在Go语言的家族树中还有其它的祖先。其中一个有影响力的分支来自Niklaus Wirth所设计的
Pascal语言。然后Modula2语言激发了包的概念。然后Oberon语言摒弃了模块接口文件和模块实
现文件之间的区别。第二代的Oberon2语言直接影响了包的导入和声明的语法，还有Oberon语言
的面向对象特性所提供的方法的声明语法等。

Go语言的另一支祖先，带来了Go语言区别其他语言的重要特性，灵感来自于贝尔实验室的Tony
Hoare于1978年发表的鲜为外界所知的关于并发研究的基础文献 顺序通信进程 （ communicating
sequential processes ，缩写为CSP。在CSP中，程序是一组中间没有共享状态的平行运行的处理
过程，它们之间使用管道进行通信和控制同步。不过Tony Hoare的CSP只是一个用于描述并发性基
本概念的描述语言，并不是一个可以编写可执行程序的通用编程语言。

5.正如Rob Pike所说，“软件的复杂性是乘法级相关的”，通过增加一个部分的复杂性来修复问题通常
将慢慢地增加其他部分的复杂性。通过增加功能、选项和配置是修复问题的最快的途径，但是这很
容易让人忘记简洁的内涵，即从长远来看，简洁依然是好软件的关键因素



