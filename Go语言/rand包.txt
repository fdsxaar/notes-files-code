rand包
//实现伪随机数生成器
Package rand implements pseudo-random number generators.

//用seed函数初始化Source
Random numbers are generated by a Source. Top-level functions, such as Float64 and Int, use a default 
shared Source that produces a deterministic sequence of values each time a program is run. Use the Seed
 function to initialize the default Source if different behavior is required for each run. The default 
 Source is safe for concurrent use by multiple goroutines, but Sources created by NewSource are not.

//左闭右开区间
Mathematical interval notation such as [0, n) is used throughout the documentation for this package.

//对安全性能要求高的场景，使用crypto/rand包
For random numbers suitable for security-sensitive work, see the crypto/rand package

func Seed
//如果没有调用Seed,默认调用Seed(1)；若除以2^31-1有相同的余数，则生成的伪随机数序列相同；并发安全使用
func Seed(seed int64)
Seed uses the provided seed value to initialize the default Source to a deterministic state. If 
Seed is not called, the generator behaves as if seeded by Seed(1). Seed values that have the same
 remainder when divided by 2^31-1 generate the same pseudo-random sequence. Seed, unlike the Rand.
 Seed method, is safe for concurrent use.

//用time.Now().UnixNano() seed
Seeding with the same value results in the same random sequence each run.
For different numbers, seed with a different value, such as
time.Now().UnixNano(), which yields a constantly-changing number.