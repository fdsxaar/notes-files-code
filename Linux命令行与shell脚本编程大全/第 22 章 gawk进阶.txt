第 22 章 gawk进阶

22.1 使用变量
gawk编程语言支持两种不同类型的变量：
 内建变量
 自定义变量

22.1.1 内建变量
1. 字段和记录分隔符变量
gawk中的一种内建变量类型——数据字段变量。数据字段变量允许你使用美元，
符号（$）和字段在该记录中的位置值来引用记录对应的字段。因此，要引用记录中的第一个数
据字段，就用变量$1；要引用第二个字段，就用$2，依次类推。
数据字段是由字段分隔符来划定的。默认情况下，字段分隔符是一个空白字符，也就是空格
符或者制表符。使用命令行参数-F或者在gawk程序中使用特殊的内
建变量FS来更改字段分隔符
表22-1 gawk数据字段和记录变量
变 量 描 述
FIELDWIDTHS 由空格分隔的一列数字，定义了每个数据字段确切宽度
FS 输入字段分隔符
RS 输入记录分隔符
OFS 输出字段分隔符
ORS 输出记录分隔符

一旦设置了FIELDWIDTH变量，gawk就会忽略FS变量，并根据提供的字段宽度来计算字段。
$ gawk 'BEGIN{FIELDWIDTHS="3 5 2 5"}{print $1,$2,$3,$4}' data1b
一定要记住，一旦设定了FIELDWIDTHS变量的值，就不能再改变了。这种方法并不适用
于变长的字段。
#gawk 'BEGIN{FIELDWIDTHS="1 1 1 10"}{FIELDWIDTHS="2 3 1 12"}{print $1,$2,$3,$4}' data1.txt

变量RS和ORS定义了gawk程序如何处理数据流中的字段。默认情况下，gawk将RS和ORS设为
换行符。默认的RS值表明，输入数据流中的每行新文本就是一条新纪录。
在数据流中碰到占据多行的字段，可以把RS变量设置成空字符串，然后在数据记录间留一个空白行。gawk会
把每个空白行当作一个记录分隔符。
gawk 'BEGIN{FS="\n"; RS=""} {print $1,$4}' data2

2. 数据变量
表22-2 更多的gawk内建变量
变 量 描 述
ARGC 当前命令行参数个数
ARGIND 当前文件在ARGV中的位置
ARGV 包含命令行参数的数组
CONVFMT 数字的转换格式（参见printf语句），默认值为%.6 g
ENVIRON 当前shell环境变量及其值组成的关联数组
ERRNO 当读取或关闭输入文件发生错误时的系统错误号
FILENAME 用作gawk输入数据的数据文件的文件名
FNR 当前数据文件中的数据行数
IGNORECASE 设成非零值时，忽略gawk命令中出现的字符串的字符大小写
NF 数据文件中的字段总数
NR 已处理的输入记录数
OFMT 数字的输出格式，默认值为%.6 g
RLENGTH 由match函数所匹配的子字符串的长度
RSTART 由match函数所匹配的子字符串的起始位置

gawk并不会将程序脚本当成命令
行参数的一部分。
$ gawk 'BEGIN{print ARGC,ARGV[1]}' data1
2 data1
$
ARGC变量表明命令行上有两个参数。这包括gawk命令和data1参数；

#说明 跟shell变量不同，在脚本中引用gawk变量时，变量名前不加美元符。

ENVIRON：关联数组用文本作为数组的索引值，而不是数值。

NF变量含有数据文件中最后一个数据字段的数字值。可以在它前面加个美元符将其用作字段
变量。

FNR变量含有当前数据文件中已处理过的记录数，NR变量则含有已处理过的记录总数
如果只使用一个数据文件作为输入， FNR和NR的值是相同的；如果使用多
个数据文件作为输入， FNR的值会在处理每个数据文件时被重置，而NR的值则会继续计数直到处
理完所有的数据文件。

如果你发现在不同的shell脚本中用到了同样的gawk脚本，记着将这段gawk脚本放到一个单独的文件中，并
用-f参数来在shell脚本中引用它；

22.1.2 自定义变量
自定义变量以字母、数字和下划线，但不能以数字开头。重要的是，要记住gawk变
量名区分大小写。
1. 在脚本中给变量赋值
$ gawk 'BEGIN{x=4; x= x * 2 + 3; print x}'

2. 在命令行上给变量赋值
也可以用gawk命令行来给程序中的变量赋值
$ cat script1
BEGIN{FS=","}
{print $n}
$ gawk -f script1 n=2 data1

使用命令行参数来定义变量值会有一个问题。在你设置了变量后，这个值在代码的BEGIN部
分不可用。
$ cat script2
BEGIN{print "The starting value is",n; FS=","}
{print $n}
$ gawk -f script2 n=3 data1
The starting value is
data13
data23
data33
$
可以用-v命令行参数来解决这个问题。它允许你在BEGIN代码之前设定变量。在命令行上，
-v命令行参数必须放在脚本代码之前。

22.2 处理数组
gawk编程语言使用关联数组提供数组功能。关联数组跟数字数组不同之处在于它的索引值
可以是任意文本字符串。

22.2.1 定义数组变量
可以用标准赋值语句来定义数组变量。数组变量赋值的格式如下：
var[index] = element
其中var是变量名，index是关联数组的索引值，element是数据元素值

22.2.2 遍历数组变量
如果要在gawk中遍历一个关联数组，可以用for语句的一种特殊形式。
for (var in array)
{
    statements
}
这个for语句会在每次循环时将关联数组array的下一个索引值赋给变量var，然后执行一
遍statements。重要的是记住这个变量中存储的是索引值而不是数组元素值；

#可以用数字做索引；数组打印出来是无序的
gawk 'BEGIN{
a[1]=12
a["b"]=16
for(i in a){
print "Index:",i, "value="a[i]
}
delete a[1]
print a[1]
}'
Index: b value=16
Index: 1 value=12

22.3 使用模式
在使用正则表达式时，正则表达式必须出现在它要控制的程序脚本的左花括号前。
$ gawk 'BEGIN{FS=","} /11/{print $1}' data1

22.3.2 匹配操作符
匹配操作符（matching operator）允许将正则表达式限定在记录中的特定数据字段。匹配操
作符是波浪线（~）。可以指定匹配操作符、数据字段变量以及要匹配的正则表达式。
$1 ~ /^data/
$1变量代表记录中的第一个数据字段。这个表达式会过滤出第一个字段以文本data开头的
所有记录

$ gawk 'BEGIN{FS=","} $2 ~ /^data2/{print $0}' data1
匹配操作符会用正则表达式/^data2/来比较第二个数据字段，该正则表达式指明字符串要
以文本data2开头

可以用!符号来排除正则表达式的匹配。
$1 !~ /expression/

22.3.3 数学表达式
可以使用任何常见的数学比较表达式。
 x == y：值x等于y。
 x <= y：值x小于等于y。
 x < y：值x小于y。
 x >= y：值x大于等于y。
 x > y：值x大于y。
显示所有属于root用户组（组ID为0）的系统用户
$ gawk -F: '$4 == 0{print $1}' /etc/passwd

也可以对文本数据使用表达式，但跟正则表达式不同，表达式必须完全匹配。数
据必须跟模式严格匹配。
$ gawk -F, '$1 == "data"{print $1}' data1

22.4 结构化命令
if (condition)
    statement1
也可以将它放在一行上，像这样：
if (condition) statement1
如果需要在if语句中执行多条语句，就必须用花括号将它们括起来。
gawk的if语句也支持else子句;
可以在单行上使用else子句，但必须在if语句部分之后使用分号。
 gawk '{
> if($0 < 50){
    #print $0*10
>    x=$0*10
>    print x
> }
> else{
>    print $0
> }}' data3.txt

22.4.2 while 语句
while (condition)
{
statements
}

gawk编程语言支持在while循环中使用break语句和continue语句,
#计算每行的和
gawk '{
    n=NF
    print "this is line "NR
    sum=0
    while(n>0){
       sum=sum+$n 
       n=n-1
    }
    print "sum of line "NR" is "sum 
}' data3.txt 

22.4.3 do-while 语句
do-while语句类似于while语句，但会在检查条件语句之前执行命令。
do
{
   statements
} while (condition)

22.4.4 for 语句
gawk编程语言支持C风格的for循环。
for( variable assignment; condition; iteration process)
gawk '{
    print "this is line "NR
    sum=0
    for(n=NF;n>0;n--){
       sum=sum+$n 
    }
    print "sum of line "NR" is "sum 
}' data3.txt 

22.5 格式化打印
C语言:
printf "format string", var1, var2 . . .
格式化指定符
%[modifier]control-letter
表22-3 格式化指定符的控制字母
控制字母 描 述
c 将一个数作为ASCII字符显示
d 显示一个整数值
i 显示一个整数值（跟d一样）
e 用科学计数法显示一个数
f 显示一个浮点值
g 用科学计数法或浮点数显示（选择较短的格式）
o 显示一个八进制值
s 显示一个文本字符串
x 显示一个十六进制值
X 显示一个十六进制值，但用大写字母A~F

有3种修饰符可以用来进一步控制输出。
 width：指定了输出字段最小宽度的数字值。如果输出短于这个值，printf会将文本右
对齐，并用空格进行填充。如果输出比指定的宽度还要长，则按照实际的长度输出。
 prec：这是一个数字值，指定了浮点数中小数点后面位数，或者文本字符串中显示的最
大字符数。
 -（减号）：指明在向格式化空间中放入数据时采用左对齐而不是右对齐
需要在printf命令的末尾手动添加换行符来生成新行。没添加的话，printf命令
会继续在同一行打印后续输出

22.6 内建函数
表22-4 gawk数学函数
函 数 描 述
atan2(x, y) x/y的反正切，x和y以弧度为单位
cos(x) x的余弦，x以弧度为单位
exp(x) x的指数函数
int(x) x的整数部分，取靠近零一侧的值
log(x) x的自然对数
rand( ) 比0大比1小的随机浮点值
sin(x) x的正弦，x以弧度为单位
sqrt(x) x的平方根
srand(x) 为计算随机数指定一个种子值

产生较大整数随机数的常见方法是用rand()函数和int()函数创建一个算法。
x = int(10 * rand())

在使用一些数学函数时要小心，因为gawk语言对于它能够处理的数值有一个限定区间。如果
超出了这个区间，就会得到一条错误消息；


除了标准数学函数外，gawk还支持一些按位操作数据的函数。
 and(v1, v2)：执行值v1和v2的按位与运算。
 compl(val)：执行val的补运算。
 lshift(val, count)：将值val左移count位。
 or(v1, v2)：执行值v1和v2的按位或运算。
 rshift(val, count)：将值val右移count位。
 xor(v1, v2)：执行值v1和v2的按位异或运算

表22-5 gawk字符串函数
函 数 描 述
asort(s [,d]) 将数组s按数据元素值排序。索引值会被替换成表示新的排序顺序的连续数字。另外，
如果指定了d，则排序后的数组会存储在数组d中
asorti(s [,d]) 将数组s按索引值排序。生成的数组会将索引值作为数据元素值，用连续数字索引来表
明排序顺序。另外如果指定了d，排序后的数组会存储在数组d中
gensub(r, s, h [, t]) 查找变量$0或目标字符串t（如果提供了的话）来匹配正则表达式r。如果h是一个以g
或G开头的字符串，就用s替换掉匹配的文本。如果h是一个数字，它表示要替换掉第h
处r匹配的地方
gsub(r, s [,t]) 查找变量$0或目标字符串t（如果提供了的话）来匹配正则表达式r。如果找到了，就
全部替换成字符串s
index(s, t) 返回字符串t在字符串s中的索引值，如果没找到的话返回0
length([s]) 返回字符串s的长度；如果没有指定的话，返回$0的长度
match(s, r [,a]) 返回字符串s中正则表达式r出现位置的索引。如果指定了数组a，它会存储s中匹配正
则表达式的那部分

函 数 描 述
split(s, a [,r]) 将s用FS字符或正则表达式r（如果指定了的话）分开放到数组a中。返回字段的总数
sprintf(format,
variables)
用提供的format和variables返回一个类似于printf输出的字符串
sub(r, s [,t]) 在变量$0或目标字符串t中查找正则表达式r的匹配。如果找到了，就用字符串s替换
掉第一处匹配
substr(s, i [,n]) 返回s中从索引值i开始的n个字符组成的子字符串。如果未提供n，则返回s剩下的部
分
tolower(s) 将s中的所有字符转换成小写
toupper(s) 将s中的所有字符转换成大写
函 数 描 述
mktime(datespec) 将一个按YYYY MM DD HH MM SS [DST]格式指定的日期转换成时间戳值①
strftime(format
[,timestamp])
将当前时间的时间戳或timestamp（如果提供了的话）转化格式化日期（采用shell
函数date()的格式）
systime( ) 返回当前时间的时间戳

22.7 自定义函数
function name([variables])
{
   statements
}
函数还能用return语句返回值;
在定义函数时，它必须出现在所有代码块之前（包括BEGIN代码块）。

gawk 'function pp(p){
   print "fucker"
   return p*p 
}
BEGIN{r=pp(10); print r}'

22.7.3 创建函数库
创建一个存储所有gawk函数的文件funclib,使用时，用-f选项装载,
$cat funclib
function f1(){

}

function f2(){

}
#脚本使用了函数f1
$cat script.sh
'BEGIN{
f1()
}'

$ gawk -f funclib -f script.sh data 