第 21 章 sed进阶

21.1.1 next 命令
1. 单行的next命令
n命令会让sed编辑器移动到文本的下一行
sed '/header/{n ; d}' data1.txt

2. 合并文本行
单行next命令会将数据流中的下一文本
行移动到sed编辑器的工作空间（称为模式空间）。多行版本的next命令（用大写N）会将下一文
本行添加到模式空间中已有的文本后
#换行符的正则匹配符是 \n 
sed '/first/{ N ; s/\n/ / }' data2.txt
用N命令将下一行合并到那行，然后用替换命令s将换行符替换成空格

$ cat data4.txt
On Tuesday, the Linux System
Administrator's group meeting will be held.
All System Administrators should attend.
$
$ sed 'N
> s/System\nAdministrator/Desktop\nUser/
> s/System Administrator/Desktop User/
> ' data4.txt
On Tuesday, the Linux Desktop
User's group meeting will be held.
All System Administrators should attend.
$
由于System Administrator文本出现在了数据流中的最后一行，N命令会错过它，因为没
有其他行可读入到模式空间跟这行合并。你可以轻松地解决这个问题——将单行命令放到N命令
前面，并将多行命令放到N命令后面，
$ sed '
> s/System Administrator/Desktop User/
> N
> s/System\nAdministrator/Desktop\nUser/
> ' data4.txt
On Tuesday, the Linux Desktop
User's group meeting will be held.
All Desktop Users should attend.

21.1.2 多行删除命令
$ sed 'N ; /System\nAdministrator/d' data4.txt
All System Administrators should attend.
$
删除命令会在不同的行中查找单词System和Administrator，然后在模式空间中将两行都删掉。
sed编辑器提供了多行删除命令D，它只删除模式空间中的第一行。该命令会删除到换行符（含
换行符）为止的所有字符。

#sed编辑器脚本会查找空白行，然后用N命令来将下一文本行添加到模式空间。如果新的模式
#空间内容含有单词header，则D命令会删除模式空间中的第一行;
#注：在模式空间查找
sed '/^$/{N ; /header/D}' data5.txt

#存疑
当多行匹配出现时，P命令只会打印模式空间中的第一行。多行P命令的强大之处在和N命令
及D命令组合使用时才能显现出来。
D命令的独特之处在于强制sed编辑器返回到脚本的起始处，对同一模式空间中的内容重新执
行这些命令（它不会从数据流中读取新的文本行）。在命令脚本中加入N命令，你就能单步扫过整
个模式空间，将多行一起匹配。
接下来，使用P命令打印出第一行，然后用D命令删除第一行并绕回到脚本的起始处。一旦返
回，N命令会读取下一行文本并重新开始这个过程。这个循环会一直继续下去，直到数据流结束。

21.2 保持空间
模式空间（pattern space）是一块活跃的缓冲区，在sed编辑器执行命令时它会保存待检查的
文本。但它并不是sed编辑器保存文本的唯一空间。
sed编辑器有另一块称作保持空间（hold space）的缓冲区域。在处理模式空间中的某些行时，
可以用保持空间来临时保存一些行
表21-1 sed编辑器的保持空间命令
命 令 描 述
h 将模式空间复制到保持空间
H 将模式空间附加到保持空间
g 将保持空间复制到模式空间
G 将保持空间附加到模式空间
x 交换模式空间和保持空间的内容

21.3 排除命令 --奇妙的用法
感叹号命令（!）用来排除（negate）命令，也就是让原本会起作用的命令不起作用

#-n 与 p
$ sed -n '/header/!p' data2.txt
This is the first data line.
This is the second data line.
This is the last line.
$
普通p命令只打印data2文件中包含单词header的那行。加了感叹号之后，情况就相反了：除
了包含单词header那一行外，文件中其他所有的行都被打印出来了。

#
$ sed '$!N;
> s/System\nAdministrator/Desktop\nUser/
> s/System Administrator/Desktop User/
> ' data4.txt
On Tuesday, the Linux Desktop
User's group meeting will be held.
All Desktop Users should attend.
$
这个例子演示了如何配合使用感叹号与N命令以及与美元符特殊地址。美元符表示数据流中
的最后一行文本，所以当sed编辑器到了最后一行时，它没有执行N命令，但它对所有其他行都执
行了这个命令。

唯一的问题是你不想将保持空间附加到要处理的第一行文本后面。这可以用感叹号命令轻松解决：
1!G

#反转文本行，图21-1，算法图，通过两个缓冲实现；tac命令会倒序显示一个文本文件
sed -n '{1!G ; h ; $p }' data2.txt

21.4 改变流
sed编辑器会从脚本的顶部开始，一直执行到脚本的结尾（D命令是个例外，它会强制
sed编辑器返回到脚本的顶部，而不读取新的行）。sed编辑器提供了一个方法来改变命令脚本的执
行流程，其结果与结构化编程类似。

21.4.1 分支
分支（branch）命令b的格式如下：
[address]b [label]
address参数决定了哪些行的数据会触发分支命令。label参数定义了要跳转到的位置。如
果没有加label参数，跳转命令会跳转到脚本的结尾
#标签以冒号开始，最多可以是7个字符长度。:label2
#当匹配分支模式，会跳到commands2；不匹配时，只执行commands1
sed '{/pattern/b label; commands1; :label; commands2}' file.txt 

#循环；<内部工作流程是怎样的>,跳转标签前置
echo "This, is, a, test, to, remove, commas." | sed -n '{
> :start
> s/,//1p   #s/,//p也行
> /,/b start
> }'

21.4.2 测试
测命令会根据替换命令的结果跳转到某个标签，而不是根据地址进行跳转。
如果替换命令成功匹配并替换了一个模式，测试命令就会跳转到指定的标签。如果替换命令
未能匹配指定的模式，测试命令就不会跳转。
[address]t [label]
跟分支命令一样，在没有指定标签的情况下，如果测试成功，sed会跳转到脚本的结尾。

echo "This, is, a, test, to, remove, commas. " | sed -n '{
> :start
> s/,//1p
> t start
> }'

21.5.1 &符号
&符号可以用来代表替换命令中的匹配的模式。
$ echo "The cat sleeps in his hat." | sed 's/.at/"&"/g'

sed编辑器用圆括号来定义替换模式中的子模式。你可以在替代模式中使用特殊字符来引用
每个子模式。替代字符由反斜线和数字组成。数字表明子模式的位置。sed编辑器会给第一个子
模式分配字符\1，给第二个子模式分配字符\2，依此类推。

当在替换命令中使用圆括号时，必须用转义字符将它们标示为分组字符而不是普通的圆
括号

echo "The System Administrator manual" | sed '
> s/\(System\) Administrator/\1 User/'

#(.*[0-9]),匹配1234也说得过去
$ echo "1234567" | sed '{
> :start
> s/\(.*[0-9]\)\([0-9]\{3\}\)/\1,\2/
> t start
> }'
1,234,567

21.6 在脚本中使用sed
./reverse.sh data2.txt

21.6.2 重定向sed 的输出
可以在脚本中用$()将sed编辑器命令的输出重定向到一个变量中
v=$(echo "fuck" | sed 's/fuck/fucker/')

21.7 创建sed 实用工具
21.7.1 加倍行间距
$ sed 'G' data2.txt
#错误
$ sed "G" data2.txt
G命令会简单地将保持空间内容附加到模式空间内容后。当启动sed编辑器时，保持空间只有一个空行。将它附加到已有
行后面，你就在已有行后面创建了一个空白行 ；

如果你不想要这个空白行，可以用排除符号（!）和尾行符号（$）来确
保脚本不会将空白行加到数据流的最后一行后面。
$ sed '$!G' data2.txt

21.7.2 对可能含有空白行的文件加倍行间距
$ sed '/^$/d ; $!G' data6.txt
这个问题的解决办法是，首先删除数据流中的
所有空白行，然后用G命令在所有行后插入新的空白行。要删除已有的空白行，需要将d命令和一
个匹配空白行的模式一起使用。

21.7.3 给文件中的行编号
在获得了等号命令的输出之后，你可以通过管道将输出传给另一个sed编辑器脚本，它会使
用N命令来合并这两行
$ sed '=' data2.txt | sed 'N; s/\n/ /'

有些bash shell命令也可以添加行号，但它们会另外加入一些东西
#是字母l,不是数字1
$nl data2.txt 
$cat -n data2.txt

21.7.4 打印末尾行
#最后一行
$ sed -n '$p' data2.txt

创建滚动窗口显示数据流末尾的若干行：
滚动窗口是检验模式空间中文本行块的常用方法，它使用N命令将这些块合并起来。N命令将
下一行文本附加到模式空间中已有文本行后面。一旦你在模式空间有了一个10行的文本块，你可
以用美元符来检查你是否已经处于数据流的尾部。如果不在，就继续向模式空间增加行，同时删
除原来的行（记住，D命令会删除模式空间的第一行）。

#精巧的代码；
#退出（quit）命令会停止循环。N命令会将下一行附加到模式空间中当前行之后。如果当前行在第10行后面，11,$D命令会
#删除模式空间中的第一行
$ sed '{
> :start
> $q ; N ; 11,$D
> b start
> }' data7.txt

21.7.5 删除行
1. 删除连续的空白行
#19.2.3 删除行
/./,/^$/!d
区间是/./到/^$/。区间的开始地址会匹配任何含有至少一个字符的行。区间的结束地址会
匹配一个空行。在这个区间内的行不会被删除;

2. 删除开头的空白行--反向思考
/./,$!d
这个区间从含有字符的行开始，一直到数据流结束。在这个区间内的任何行都不会从输出中删除。这意味着含
有字符的第一行之前的任何行都会删除。

3. 删除结尾的空白行
#N-前进，:start 循环
sed '{
:start
/^\n*$/{$d; N; b start }
}'

地址模式能够匹配只含有一个换行
符的行。如果找到了这样的行，而且还是最后一行，删除命令会删掉它。如果不是最后一行，N
命令会将下一行附加到它后面，分支命令会跳到循环起始位置重新开始。

21.7.6 删除HTML 标签
$ sed 's/<[^>]*>//g ; /^$/d' data11.txt
