第17章 创建函数 

17.1 基本的脚本函数
有两种格式可以用来在bash shell脚本中创建函数。第一种格式采用关键字function，后跟
分配给该代码块的函数名。
function name {
   commands
}

第二种格式更接近于其他编程语言中定义函数的方式。
name() {
  commands
}

如果在函数被定义前使用函数，会收到一条错误消息。

17.2 返回值
bash shell会把函数当作一个小型脚本，运行结束时会返回一个退出状态码;
17.2.1 默认退出状态码
默认情况下，函数的退出状态码是函数中最后一条命令返回的退出状态码。

17.2.2 使用return 命令
bash shell使用return命令来退出函数并返回特定的退出状态码。return命令允许指定一个
整数值来定义函数的退出状态码，从而提供了一种简单的途径来编程设定函数退出状态码。
 函数一结束就取返回值；
 退出状态码必须是0~255。
如果在用$?变量提取函数返回值之前执行了其他命令，函数的返回值就会丢失。记住，$?
变量会返回执行的最后一条命令的退出状态码。

会将dbl函数的输出赋给$result变量
result=$(dbl)

17.3 在函数中使用变量
17.3.1 向函数传递参数
---
#s.sh 
f(){
    echo $[ $1 + $2 ]
}

#在脚本中调用函数时，传递给函数的参数用$n引用
v=$(f 10 10)
echo " 10 + 10 = $v"
v=$(f 9 + 9)
echo "9 + 9 = $v"
----

----
#s2.sh
f(){
    echo $[ $1 + $2 ]
}

v=$(f)
echo $v
-----
#但是s2.sh中的f不能直接捕获命令行参数变量，要直接传给它
$ ./s2.sh 10 10

---
#s3.sh
f(){
    echo $[ $1 + $2 ]
}

v=$(f $1 $2)
echo $v
---
$./s3.sh 10 20 

17.3.2 在函数中处理变量
全局变量是在shell脚本中任何地方都有效的变量;
默认情况下，你在脚本中定义的任何变量都是全局变量；
#尽管va是全局变量，但是在f被调用时，它还未被定义；
#因此，函数调用时，变量必须被定义
    1 #!/bin/bash
      2
      3 vf=10
      4
      5 f(){
      6   echo $vf
      7   echo $va
      8 }
      9 va=20
     10 f
     11
     12 #va=20

2. 局部变量
2. 局部变量
无需在函数中使用全局变量，函数内部使用的任何变量都可以被声明成局部变量。要实现这
一点，只要在变量声明的前面加上local关键字就可以了
local关键字保证了变量只局限在该函数中。如果脚本中在该函数之外有同样名字的变量，
那么shell将会保持这两个变量的值是分离的

17.4 数组变量和函数
要解决这个问题，你必须将该数组变量的值分解成单个的值，然后将这些值作为函数参数使
用。在函数内部，可以将所有的参数重新组合成一个新的变量
#分解
func ${myarray[*]}
#合并
newarray=(echo "$@")
#语法
arg1=$(echo ${myarray[*]})
result=$(addarray $arg1) #传递参数

17.4.2 从函数返回数组
函数用echo语句来按正确顺序输出单个
数组值，然后脚本再将它们重新放进一个新的数组变量中。
func(){
    echo ${newarray[*]}
}
#特定的语法
arg1=$(echo ${myarray[*]})
result=($(func $arg1))
echo "The new array is: ${result[*]}" 

函数递归
function factorial {
if [ $1 -eq 1 ]
then
   echo 1
else
   local temp=$[ $1 - 1 ]
   local result=$(factorial $temp)
   echo $[ $result * $1 ]
fi
}

17.6 创建库
bash shell允许创建函数库文件，然后在多个脚本中引用该库文件。
1.创建一个包含脚本中所需函数的公用库文件myfuncs
/full/path/myfuncs
#myfuncs
f1(){

}

f2(){

}

2.在用到这些函数的脚本文件中包含myfuncs库文件。source命令会在当前shell上下文中执行命令，而不是
创建一个新shell。可以用source命令来在shell脚本中运行库文件脚本。这样脚本就可以使用库
中的函数了。
source命令有个快捷的别名，称作点操作符（dot operator）。
#s.sh
---START--- 
#!/bin/bash 
. /full/path/myfuns 
commands1
commands2
f1 
f2 
---END---

#不好的实践 
17.7 在命令行上使用函数 
在命令行上直接定义一个函数
1.一种方法是采用单行方式定义函数。
$ function divem { echo $[ $1 / $2 ]; }
当在命令行上定义函数时，在每个命令后面加个分号，这样shell就能知道在哪里
是命令的起止了。

另一种方法是采用多行方式来定义函数。在定义时，bash shell会使用次提示符来提示输入更
多命令。用这种方法，你不用在每条命令的末尾放一个分号，只要按下回车键就行。
$ function multem {
> echo $[ $1 * $2 ]
> }

17.7.2 在.bashrc 文件中定义函数
在命令行上直接定义shell函数的明显缺点是退出shell时，函数就消失了；
一个非常简单的方法是将函数定义在一个特定的位置，这个位置在每次启动一个新shell的时
候，都会由shell重新载入。
最佳地点就是.bashrc文件。bash shell在每次启动时都会在主目录下查找这个文件，不管是交
互式shell还是从现有shell中启动的新shell。
1. 直接定义函数
直接在主目录下的.bashrc文件中定义函数

2.2. 读取函数文件
只要是在shell脚本中，都可以用source命令（或者它的别名点操作符）将库文件中的函数
添加到你的.bashrc脚本中。

17.8 实例
$wget ftp://ftp.gnu.org/gnu/shtool/shtool-2.0.8.tar.gz
$tar -zxvf shtool-2.0.8.tar.gz
$ ./confifgure
$ make
$make install
shtool [options] [function [options] [args]]

$ cat test16
#!/bin/bash
shtool platform

$ ls –al /usr/bin | shtool prop –p "waiting..."
可以使用\、|、/和-字符创建一个旋转的进度条,-p选项允许你定制输出文
本，这段文本会出现在进度条字符之前

