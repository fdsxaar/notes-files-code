第19 章 初识sed和gawk

sed编辑器会执行下列操作:
(1) 一次从输入中读取一行数据。
(2) 根据所提供的编辑器命令匹配数据。
(3) 按照命令修改流中的数据。
(4) 将新的数据输出到STDOUT。

sed编辑器被称作流编辑器（stream editor），
sed命令的格式如下。
sed options script file
选项允许你修改sed命令的行为，可以使用的选项已在表19-1中列出。
表19-1 sed命令选项
选 项 描 述
-e script 在处理输入时，将script中指定的命令添加到已有的命令中
-f file 在处理输入时，将file中指定的命令添加到已有的命令中
-n 不产生命令输出，使用print命令来完成输出
script参数指定了应用于流数据上的单个命令。如果需要用多个命令，要么使用-e选项在
命令行中指定，要么使用-f选项在单独的文件中指定

1. 在命令行定义编辑器命令
$ echo "This is a test" | sed 's/test/big test/'
sed编辑器并不会修改文本文件的数据。它只会将修改后的数据发送到STDOUT

2. 在命令行使用多个编辑器命令
要在sed命令行上执行多个命令时，只要用-e选项就可以了。
$ sed -e 's/brown/green/; s/dog/cat/' data1.txt
命令之间必须用分号隔开，并且在命令末尾和分号
之间不能有空格。如果不想用分号，也可以用bash shell中的次提示符来分隔命令
sed -e '
> s/brown/green/
> s/fox/elephant/
> s/dog/cat/' data1.txt
要在封尾单引号所在行结束命令

3. 从文件中读取编辑器命令
$ sed -f script1.sed data1.txt
不用在每条命令后面放一个分号

19.1.2 gawk 程序
gawk options program file
-F fs 指定行中划分数据字段的字段分隔符
-f file 从指定的文件中读取程序
-v var=value 定义gawk程序中的一个变量及其默认值
-mf N 指定要处理的数据文件中的最大字段数
-mr N 指定数据文件中的最大数据行数
-W keyword 指定gawk的兼容模式或警告等级

2. 从命令行读取程序脚本
gawk程序脚本用一对花括号来定义,必须将脚本命令放到两个花括号（{}）中,
由于gawk命令行假定脚本是单个文本字符串，你还必须将脚本放到单引号中,
gawk程序会从STDIN接收数据
$ gawk '{print "Hello World!"}'
bash shell提供了一个组合键来生成
EOF（End-of-File）字符。Ctrl+D组合键会在bash中产生一个EOF字符。这个组合键能够终止该gawk
程序并返回到命令行界面提示符下。

3. 使用数据字段变量
默认情况下，gawk会将如下变量分配给它在文本行中发现的数据字段：
 $0代表整个文本行；
 $1代表文本行中的第1个数据字段；
 $2代表文本行中的第2个数据字段；
 $n代表文本行中的第n个数据字段。 //代表整个文本行，与 $0 相同
gawk中默认的字段分隔符是任意的空白字符（例如空格或制
表符）。

4. 在程序脚本中使用多个命令
要在命令行上的程序脚本中使用多条命令，只要在命令之间放个分
号即可。
$ echo "My name is Rich" | gawk '{$4="Christine"; print $0}'
也可以用次提示符一次一行地输入程序脚本命令。
$ gawk '{
> $4="Christine"
> print $0}'
My name is Rich

5. 从文件中读取程序
$ gawk -F: -f script2.gawk /etc/passwd
可以在程序文件中指定多条命令。要这么做的话，只要一条命令放一行即可，不需要用分号。
#注：但是，脚本文件中仍然要用花括号{},gawk程序在引用变量值时并未像shell脚本一样使用美元符。
#直接使用text 
$ cat script3.gawk
{
text = "'s home directory is "
print $1 text $6
}

6. 在处理数据前运行脚本
BEGIN关键字就是用来做这个的。它会强制gawk在读取数据前执行BEGIN关键字后指定的程序脚本。
$ gawk 'BEGIN {print "Hello World!"}'
$ gawk BEGIN'{print "Hello"}'

7. 在处理数据后运行脚本
与BEGIN关键字类似，END关键字允许你指定一个程序脚本，gawk会在读完数据后执行它
gawk 'BEGIN {print "The data3 File Contents:"}
> {print $0}
> END {print "End of File"}' data3.txt
这是在处理完所有正常数据后给报告添加页脚的最佳方法。

19.2 sed 编辑器基础
#相对于行而言
替换命令在替换多行中的文本时能正常工作，但默认情况下它只替换每行中出现的第一处。
要让替换命令能够替换一行中不同地方出现的文本必须使用替换标记（substitution flag）。替换标
记会在替换命令字符串之后设置。
s/pattern/replacement/flags
有4种可用的替换标记：
 数字，表明新文本将替换第几处模式匹配的地方；
 g，表明新文本将会替换所有匹配的文本；
 p，打印修改过的行；
 w file，将替换的结果写到文件中

$ sed -n 's/test/trial/p' data5.txt
-n选项将禁止sed编辑器输出。但p替换标记会输出修改过的行。将二者配合使用的效果就是
只输出被替换命令修改过的行。

2. 替换字符
$ sed -n 's/\/bin\/bash/\/bin\/csh/p' /etc/passwd
由于正斜线通常用作字符串分隔符，因而如果它出现在了模式文本中的话，必须用反斜线来
转义
sed编辑器允许选择其他字符来作为替换命令中的字符串分隔符：
$ sed 's!/bin/bash!/bin/csh!' /etc/passwd

19.2.2 使用地址
如果只想将命令作用
于特定行或某些行，则必须用行寻址（line addressing）。
在sed编辑器中有两种形式的行寻址：
 以数字形式表示行区间
 用文本模式来过滤出行

#与下面的应用举例不符
两种形式都使用相同的格式来指定地址：
[address]command
也可以将特定地址的多个命令分组：
address {
 command1
 command2
 command3
}

1. 数字方式的行寻址
sed编辑器会将文本流中的第一行编号为1，然后继续按顺序为接下来的行分配行号。
在命令中指定的地址可以是单个行号，或是用起始行号、逗号以及结尾行号指定的一定区间
范围内的行
$ sed '2s/dog/cat/' data1.txt
$ sed '2,3s/dog/cat/' data1.txt
如果想将命令作用到文本中从某行开始的所有行，可以用特殊地址——美元符。
$ sed '2,$s/dog/cat/' data1.txt

//可以使用正则表达式匹配 
2. 使用文本模式过滤器
sed编辑器允许指定文本模式来过滤出命令要作用的行。格式如下：
/pattern/command
$ sed '/dog/s/dog/dogdog/' data1.txt 
#用法错误，不能混合使用行寻址与文本模式过滤
$ sed '/dog/1,$s/dog/dogdog/' data1.txt 

3.命令组合
sed '2{
> s/fox/elephant/
> s/dog/cat/
> }' data1.txt

19.2.3 删除行
删除命令d名副其实，它会删除匹配指定寻址模式的所有行。使用该命令时要特别小心，如
果你忘记加入寻址模式的话，流中的所有文本行都会被删除。

可以从数据流中删除特定的文本行，通过行号指定：
$ sed '3d' data6.txt
通过特定行区间指定：
$ sed '2,3d' data6.txt
特殊的文件结尾字符：    
$ sed '3,$d' data6.txt
sed编辑器的模式匹配特性也适用于删除命令。
$ sed '/number 1/d' data6.txt

sed编辑器不会修改原始文件。你删除的行只是从sed编辑器的输出中消失了。原始
文件仍然包含那些“删掉的”行。

#区间操作，有坑
也可以使用两个文本模式来删除某个区间内的行，但这么做时要小心。你指定的第一个模式
会“打开”行删除功能，第二个模式会“关闭”行删除功能。sed编辑器会删除两个指定行之间
的所有行（包括指定的行）。
$ sed '/1/,/3/d' data6.txt
$ sed '/1/,/5/d' data7.txt
$
因为删除功能在匹配到第一个模式的时候打开了，但一直没匹配到结束模式，所以整个数据
流都被删掉了。

当使用插入命令时，文本会出现在数据流文本的前面。
$ echo "Test Line 2" | sed 'i\Test Line 1'
$ echo "Test Line 2" | sed 'a\Test Line 1'

要将新行附加到数据流的末尾，只要用代表数据最后一行的美元符就可以了。
$ sed '$a\xxx' file 

#注：还必须用如下次提示符的提示输出，表明每行
要插入或附加多行文本，就必须对要插入或附加的新文本中的每一行使用反斜线，直到最后
一行。
$ sed '1i\
> This is one line of new text.\
> This is another line of new text.' data6.txt

19.2.5 修改行 change
必须在sed命令中单独指定新行。
$ sed '3c\
> This is a changed line of text.' data6.txt

也可以用文本模式来寻址。
$ sed '/number 3/c\
> This is a changed line of text.' data6.txt

#注：修改替换了两行
$ sed '2,3c\
> This is a new line of text.' data6.txt

19.2.6 转换命令
转换（transform）命令（y）是唯一可以处理单个字符的sed编辑器命令。转换命令格式
如下。
[address]y/inchars/outchars/
转换命令会对inchars和outchars值进行一对一的映射。inchars中的第一个字符会被转
换为outchars中的第一个字符，第二个字符会被转换成outchars中的第二个字符。这个映射过
程会一直持续到处理完指定字符。如果inchars和outchars的长度不同，则sed编辑器会产生一
条错误消息。
$ sed 'y/123/789/' data8.txt
转换命令是一个全局命令，也就是说，它将文本行中找到的所有指定字符自动进行转换，而
不会考虑它们出现的位置。

19.2.7 回顾打印
另外有3个命令也能用
来打印数据流中的信息：
 p命令用来打印文本行；
 等号（=）命令用来打印行号；
 l（小写的L）命令用来列出行

1. 打印行
#模式匹配
$ sed -n '/number 3/p' data6.txt
This is line number 3.
在命令行上用-n选项，你可以禁止输出其他行，只打印包含匹配文本模式的行
$ sed -n '2,3p' data6.txt
#下面两个命令相同
$sed '/1|2|3|4/p' data1.txt
$sed -n '/[[:digit:]]/p' data1.txt

可以创建一个脚本在修改行之前显示该行。
$ sed -n '/3/{
> p
> s/line/test/p
> }' data6.txt
This is line number 3.
This is test number 3.
$

2. 打印行号
等号命令会打印行在数据流中的当前行号。行号由数据流中的换行符决定。每次数据流中出
现一个换行符，sed编辑器会认为一行文本结束了。
如果你要在数据流中查找特定文本模式的话，
等号命令用起来非常方便。
$ sed -n '/number 4/{
> =
> p
> }' data6.txt

3. 列出行
列出（list）命令（l）可以打印数据流中的文本和不可打印的ASCII字符。任何不可打印
字符要么在其八进制值前加一个反斜线，要么使用标准C风格的命名法,比如\t，来代表制表符。

$ cat data9.txt
This line contains tabs.
$
$ sed -n 'l' data9.txt
This\tline\tcontains\ttabs.$
$
制表符的位置使用\t来显示。行尾的美元符表示换行符。如果数据流包含了转义字符，列出
命令会在必要时候用八进制码来显示。

#将转义字符写入文本
echo -e "\a" > escape.txt

19.2.8 使用sed 处理文件
1. 写入文件
w命令用来向文件写入行。该命令的格式如下：
[address]w filename
filename可以使用相对路径或绝对路径，但不管是哪种，运行sed编辑器的用户都必须有文
件的写权限。地址可以是sed中支持的任意类型的寻址方式，例如单个行号、文本模式、行区间
或文本模式
如果你不想让行显示到STDOUT上，你可以用sed命令的-n选项
$sed '1,2w test.txt' data6.txt
$sed -n '/Browncoat/w Browncoats.txt' data11.txt

2. 从文件读取数据
读取（read）命令（r）允许你将一个独立文件中的数据插入到数据流中。
[address]r filename
filename参数指定了数据文件的绝对路径或相对路径。你在读取命令中使用地址区间，只
能指定单独一个行号或文本模式地址。sed编辑器会将文件中的文本插入到指定地址后。
$ sed '3r data12.txt' data6.txt
#将文本内容分别插入到1，2，3行后面
sed '1,3r data.txt' data1.txt
$ sed '/number 2/r data12.txt' data6.txt
在数据流的末尾添加文本，只需用美元符地址符；
$ sed '$r data12.txt' data6.txt

#在占位符后插入文件内容，再删除占位符；无法执行！
和删除命令配合使用：利用另一个文件中的数据来替换文件
中的占位文本。
$ cat notice.std
Would the following people:
LIST
please report to the ship's captain.
$
$ sed '/LIST/{
> r data11.txt
> d
> }' notice.std
Would the following people:
Blum, R Browncoat
McGuiness, A Alliance
Bresnahan, C Browncoat
Harken, C Alliance
please report to the ship's captain.
$