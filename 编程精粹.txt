1.注释程序（函数、算法）的编写思路，能够很容易读懂

2.研究某个代码/事件，必须放在具体的上下文中

3.图、表有助于解释问题

4.定位问题时，先考虑宏观/主要问题，再考虑细节问题，切勿陷入细节，例如，TopoSort.c 中的quicksort函数的索引范围；

5.常常需要在运行时间和主存空间时间做出选择，这种情况要视软件的具体应用而定

6.在软件设计时，先列出软件的整体架构，然后进行模块化开发。对于模块开发，先写出简单的、基本的功能，然后，再添加复杂的
  功能，每写一个功能时，应该及时写一个对应的单元测试，检测正确性。

7.越高级的语言，编写的程序性能越低，高级语言进行了过度封装，隐藏实现细节，留给程序员更少的控制权，反过来，有利于业务开发速度。
   所以，采用高级语言编写业务，一定程度上牺牲了性能。

8.软件工程的构建原则之一是：多用组件，然而引入组件也引入了复杂性或风险，如果能用已经存在的组件解决问题，就不要引入组件。
   <Kafka与Redis之组件思考>